@model Ticketsystem.ViewModels.AdminTicketsByPriorityViewModel

@{
    bool isOverdue = false;
    if (Context.Request.Query.ContainsKey("overdue") && Context.Request.Query["overdue"] == "true")
    {
        isOverdue = true;
    }
    ViewData["Title"] = isOverdue ? "Überfällige Tickets (offen > 3 Tage)" : "Alle Tickets nach Priorität";
    var priorities = new[] { "Hoch", "Mittel", "Niedrig" };
}

<h2 class="d-inline-block">@ViewData["Title"]</h2>
<span class="ms-3 align-middle">
    <span>Filter: </span>
    <a href="?status=Offen@(Context.Request.Query["overdue"].Count > 0 ? "&overdue=" + Context.Request.Query["overdue"] : "")" class="btn btn-outline-primary btn-sm @(Context.Request.Query["status"] == "Offen" ? "fw-bold" : "")">Offen</a>
    <a href="?status=In%20Bearbeitung@(Context.Request.Query["overdue"].Count > 0 ? "&overdue=" + Context.Request.Query["overdue"] : "")" class="btn btn-outline-warning btn-sm @(Context.Request.Query["status"] == "In Bearbeitung" ? "fw-bold" : "")">In Bearbeitung</a>
    <a href="?status=Geschlossen@(Context.Request.Query["overdue"].Count > 0 ? "&overdue=" + Context.Request.Query["overdue"] : "")" class="btn btn-outline-success btn-sm @(Context.Request.Query["status"] == "Geschlossen" ? "fw-bold" : "")">Geschlossen</a>
    <a href="?@(Context.Request.Query["overdue"].Count > 0 ? "overdue=" + Context.Request.Query["overdue"] : "")" class="btn btn-outline-secondary btn-sm @(string.IsNullOrEmpty(Context.Request.Query["status"]) ? "fw-bold" : "")">Alle</a>
</span>

@foreach (var priority in priorities)
{
    <div class="mb-4">
        <div class="card h-100">
            <div class="card-header @(priority == "Hoch" ? "card-header-priority-hoch" : priority == "Mittel" ? "card-header-priority-mittel" : priority == "Niedrig" ? "card-header-priority-niedrig" : "")">
                <h5 class="card-title mb-0">Priorität: @priority</h5>
            </div>
            <div class="card-body">
                <div class="mb-2">
                    <span>Sortieren nach: </span>
                    <a href="?sortField_@priority=date&sortOrder_@priority=@((GetSortField(priority) == "date" && GetSortOrder(priority) == "asc") ? "desc" : "asc")@(Context.Request.Query["overdue"].Count > 0 ? "&overdue=" + Context.Request.Query["overdue"] : "")@GetOtherSortParams(priorities, priority)" class="btn btn-link btn-sm @(GetSortField(priority) == "date" ? "fw-bold" : "")">Datum</a>
                    <a href="?sortField_@priority=name&sortOrder_@priority=@((GetSortField(priority) == "name" && GetSortOrder(priority) == "asc") ? "desc" : "asc")@(Context.Request.Query["overdue"].Count > 0 ? "&overdue=" + Context.Request.Query["overdue"] : "")@GetOtherSortParams(priorities, priority)" class="btn btn-link btn-sm @(GetSortField(priority) == "name" ? "fw-bold" : "")">Name</a>
                    <a href="?sortField_@priority=status&sortOrder_@priority=@((GetSortField(priority) == "status" && GetSortOrder(priority) == "asc") ? "desc" : "asc")@(Context.Request.Query["overdue"].Count > 0 ? "&overdue=" + Context.Request.Query["overdue"] : "")@GetOtherSortParams(priorities, priority)" class="btn btn-link btn-sm @(GetSortField(priority) == "status" ? "fw-bold" : "")">Status</a>
                </div>
                @if (Model.GroupedTickets.ContainsKey(priority) && Model.GroupedTickets[priority].Any())
                {
                    <table class="table table-sm">
                        <thead>
                            <tr>
                                <th>Titel</th>
                                <th>Status</th>
                                <th>Erstellt am</th>
                                <th>Erstellt von</th>
                                <th>Developer</th>
                            </tr>
                        </thead>
                        <tbody>
                        @foreach (var ticket in Model.GroupedTickets[priority])
                        {
                            <tr>
                                <td>@ticket.Title</td>
                                <td>@ticket.Status</td>
                                <td>@ticket.CreatedAt.ToString("dd.MM.yyyy")</td>
                                <td>@if (ticket.Creator?.FullName == null) {
                                    @ticket.Creator?.UserName
                                } else {
                                    @ticket.Creator?.FullName
                                }</td>
                                <td>Developer NAME</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                }
                else
                {
                    <p>Keine Tickets mit dieser Priorität.</p>
                }
            </div>
        </div>
    </div>
}

@functions {
    private string GetOtherSortParams(string[] priorities, string currentPriority)
    {
        var query = Context.Request.Query;
        var result = "";
        foreach (var p in priorities)
        {
            if (p != currentPriority)
            {
                if (!string.IsNullOrEmpty(query[$"sortField_{p}"]))
                    result += $"&sortField_{p}={query[$"sortField_{p}"]}";
                if (!string.IsNullOrEmpty(query[$"sortOrder_{p}"]))
                    result += $"&sortOrder_{p}={query[$"sortOrder_{p}"]}";
            }
        }
        return result;
    }
    private string GetSortField(string priority)
    {
        switch (priority)
        {
            case "Hoch": return ViewBag.SortField_Hoch ?? "date";
            case "Mittel": return ViewBag.SortField_Mittel ?? "date";
            case "Niedrig": return ViewBag.SortField_Niedrig ?? "date";
            default: return "date";
        }
    }
    private string GetSortOrder(string priority)
    {
        switch (priority)
        {
            case "Hoch": return ViewBag.SortOrder_Hoch ?? "desc";
            case "Mittel": return ViewBag.SortOrder_Mittel ?? "desc";
            case "Niedrig": return ViewBag.SortOrder_Niedrig ?? "desc";
            default: return "desc";
        }
    }
} 