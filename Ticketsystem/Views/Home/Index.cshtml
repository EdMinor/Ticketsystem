@model IEnumerable<Ticketsystem.Models.Ticket>
@{
    ViewData["Title"] = "Dashboard";
    var openTickets = Model.Count(t => t.Status == "Offen");
    var inProgressTickets = Model.Count(t => t.Status == "In Bearbeitung");
    var closedTickets = Model.Count(t => t.Status == "Geschlossen");
    var avgResolutionTime = Model.Where(t => t.Status == "Geschlossen")
                               .Average(t => (DateTime.Now - t.CreatedAt).TotalDays);
}

<div class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-8">Dashboard</h1>

    <!-- Statistik Karten -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <!-- Offene Tickets -->
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-gray-500 dark:text-gray-400 font-medium">Offene Tickets</p>
                    <h3 class="text-2xl font-bold text-gray-900 dark:text-white">@openTickets</h3>
                </div>
                <div class="p-3 rounded-full bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-300">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                    </svg>
                </div>
            </div>
            <div class="mt-4">
                <span class="text-green-500 text-sm font-medium">@Math.Round((double)openTickets / Model.Count() * 100, 1)%</span> aller Tickets
            </div>
        </div>

        <!-- In Bearbeitung -->
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-gray-500 dark:text-gray-400 font-medium">In Bearbeitung</p>
                    <h3 class="text-2xl font-bold text-gray-900 dark:text-white">@inProgressTickets</h3>
                </div>
                <div class="p-3 rounded-full bg-yellow-100 dark:bg-yellow-900 text-yellow-600 dark:text-yellow-300">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                </div>
            </div>
            <div class="mt-4">
                <span class="text-green-500 text-sm font-medium">@Math.Round((double)inProgressTickets / Model.Count() * 100, 1)%</span> aller Tickets
            </div>
        </div>

        <!-- Geschlossene Tickets -->
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-gray-500 dark:text-gray-400 font-medium">Geschlossene</p>
                    <h3 class="text-2xl font-bold text-gray-900 dark:text-white">@closedTickets</h3>
                </div>
                <div class="p-3 rounded-full bg-green-100 dark:bg-green-900 text-green-600 dark:text-green-300">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                </div>
            </div>
            <div class="mt-4">
                <span class="text-green-500 text-sm font-medium">@Math.Round((double)closedTickets / Model.Count() * 100, 1)%</span> aller Tickets
            </div>
        </div>

        <!-- Durchschnittliche Bearbeitungszeit -->
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-gray-500 dark:text-gray-400 font-medium">Durchschn. Bearbeitung</p>
                    <h3 class="text-2xl font-bold text-gray-900 dark:text-white">@(closedTickets > 0 ? Math.Round(avgResolutionTime, 1) + "d" : "N/A")</h3>
                </div>
                <div class="p-3 rounded-full bg-purple-100 dark:bg-purple-900 text-purple-600 dark:text-purple-300">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                </div>
            </div>
            <div class="mt-4">
                @if (closedTickets > 0)
                {
                        <span class="text-sm">Basierend auf @closedTickets Tickets</span>
                }
                else
                {
                        <span class="text-sm">Keine geschlossenen Tickets</span>
                }
            </div>
        </div>
    </div>

    <!-- Zwei Spalten Layout -->
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <!-- Aktuelle Tickets -->
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
            <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                <h3 class="text-lg font-medium text-gray-900 dark:text-white">Aktuelle Tickets</h3>
            </div>
            <div class="divide-y divide-gray-200 dark:divide-gray-700">
                @foreach (var ticket in Model.OrderByDescending(t => t.CreatedAt).Take(5))
                {
                        <div class="px-6 py-4 hover:bg-gray-50 dark:hover:bg-gray-700">
                            <div class="flex items-center justify-between">
                                <div>
                                    <p class="font-medium text-gray-900 dark:text-white">#TKT-@ticket.Id.ToString("D4")</p>
                                    <p class="text-sm text-gray-500 dark:text-gray-400">@ticket.Title</p>
                                </div>
                            @{
                                var badgeClass = "";
                                var badgeText = ticket.Status;
                                if (ticket.Status == "Offen")
                                {
                                    badgeClass = "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-100";
                                }
                                else if (ticket.Status == "In Bearbeitung")
                                {
                                    badgeClass = "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-100";
                                }
                                else if (ticket.Status == "Geschlossen")
                                {
                                    badgeClass = "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100";
                                }
                                else
                                {
                                    badgeClass = "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-100";
                                }
                            }
                                <span class="px-2 py-1 text-xs font-semibold leading-tight rounded-full @badgeClass">@badgeText</span>
                            </div>
                            <div class="mt-2 flex items-center text-sm text-gray-500 dark:text-gray-400">
                                <span>Erstellt @((DateTime.Now - ticket.CreatedAt).Days > 0 ? $"vor {(DateTime.Now - ticket.CreatedAt).Days} Tagen" : "heute")</span>
                                <span class="mx-2">•</span>
                                <span>Priorität: @ticket.Priority</span>
                            @if (ticket.Category != null)
                            {
                                        <span class="mx-2">•</span>
                                        <span>@ticket.Category.Titel</span>
                            }
                            </div>
                        </div>
                }
            </div>
            <div class="px-6 py-4 bg-gray-50 dark:bg-gray-700 text-center">
                <a asp-controller="Ticket" asp-action="Index" class="text-sm font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300">Alle Tickets anzeigen →</a>
            </div>
        </div>

        <!-- Aktivitätsverlauf -->
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow overflow-hidden">
            <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                <h3 class="text-lg font-medium text-gray-900 dark:text-white">Aktivitätsverlauf</h3>
            </div>
            <div class="divide-y divide-gray-200 dark:divide-gray-700">
                @foreach (var ticket in Model.OrderByDescending(t => t.CreatedAt).Take(3))
                {
                        <div class="px-6 py-4">
                            <div class="flex items-start">
                                <div class="flex-shrink-0">
                                @{
                                    var iconClass = "";
                                    var iconPath = "";
                                    if (ticket.Status == "Geschlossen")
                                    {
                                        iconClass = "bg-green-100 text-green-600 dark:bg-green-900 dark:text-green-300";
                                        iconPath = "M5 13l4 4L19 7";
                                    }
                                    else if (ticket.Status == "In Bearbeitung")
                                    {
                                        iconClass = "bg-blue-100 text-blue-600 dark:bg-blue-900 dark:text-blue-300";
                                        iconPath = "M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z";
                                    }
                                    else
                                    {
                                        iconClass = "bg-purple-100 text-purple-600 dark:bg-purple-900 dark:text-purple-300";
                                        iconPath = "M12 4v16m8-8H4";
                                    }
                                }
                                    <div class="p-2 @iconClass rounded-full">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="@iconPath" />
                                        </svg>
                                    </div>
                                </div>
                                <div class="ml-3">
                                    <p class="text-sm font-medium text-gray-900 dark:text-white">
                                        Ticket #TKT-@ticket.Id.ToString("D4") @(ticket.Status == "Geschlossen" ? "geschlossen" : ticket.Status == "In Bearbeitung" ? "aktualisiert" : "erstellt")
                                    </p>
                                    <p class="text-sm text-gray-500 dark:text-gray-400">
                                        Von @(ticket.Creator?.UserName ?? "Unbekannt") @((DateTime.Now - ticket.CreatedAt).Days > 0 ? $"vor {(DateTime.Now - ticket.CreatedAt).Days} Tagen" : "heute")
                                    </p>
                                </div>
                                <div class="ml-auto text-sm text-gray-500 dark:text-gray-400">
                                @ticket.CreatedAt.ToString("HH:mm")
                                </div>
                            </div>
                        </div>
                }
            </div>
            <div class="px-6 py-4 bg-gray-50 dark:bg-gray-700 text-center">
                <a asp-controller="Ticket" asp-action="Index" class="text-sm font-medium text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300">Alle Aktivitäten anzeigen →</a>
            </div>
        </div>
    </div>
</div>