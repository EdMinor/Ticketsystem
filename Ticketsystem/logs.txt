#################################################
!!! ALLES INSTALLIEREN !!! powershell �ffnen (strg + �)
#################################################

dotnet add package Microsoft.EntityFrameworkCore.Sqlite --version 8.0.0
dotnet add package Microsoft.EntityFrameworkCore.Design --version 8.0.0
dotnet add package Microsoft.EntityFrameworkCore.Tools --version 8.0.0
dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore --version 8.0.0
dotnet add package Microsoft.AspNetCore.Identity.UI --version 8.0.0

#################################################




// Datenbank
[1] Entity Framework Core installiert --VERSION 8--

[2] Verbindung in appsettings.json definiert ("TicketSystemDatenbankVerbindung")
	"ConnectionStrings": {
        "TicketSystemDatenbankVerbindung": "Data Source=ticketsystem.db"

[3] AppDbContext.cs unter /Models erstellt und konfiguriert
	public class AppDbContext : IdentityDbContext
    {
        public AppDbContext(DbContextOptions<AppDbContext> options)
            : base(options) { }

        public DbSet<Ticket> Tickets { get; set; }
    }

[4] Ticket.cs in /Models/ erstellt (Title, Description, Status, Priority, etc.)

[5] DbContext in Program.cs registriert (UseSqlite)
    // Datenbank-Verbindung 
            builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseSqlite(builder.Configuration.GetConnectionString("TicketSystemDatenbankVerbindung")));



// Identity-System
[1] AspNetCore.Identity --Version 8-- installiert

[2] in Program.cs Identity aktiviert
    // Identity 
            builder.Services.AddIdentity<IdentityUser, IdentityRole>()
    .AddEntityFrameworkStores<AppDbContext>()
    .AddDefaultTokenProviders();

[3] in Program.cs UseAuthentication() aktiviert
    // UseAuthentication() aktiviert... REIHENFOLGE WICHTIG!!!
            app.UseAuthentication();
            app.UseAuthorization();



// Migration
[1] Erste Migration erstellen (InitialCreate)
    dotnet ef migrations add InitialCreate
!!!Vorher alles abspeichern oder Projektmappe NEU ERSTELLEN und mit "cd Ticketsystem" in Unterordner(projektordner) gehen

[2] Datenbank generieren
    dotnet ef database update



// AccountController mit Register, Logion
[1] AccountController.cs in /Controllers/ erstellen

[2] RegisterModel.cs unter /Models/ erstellen
[3] Register.cshtml unter /Views/Account/ erstellen

[4] LoginModel.cs unter /Models/ erstellen
[5] Logion.cshtml unter /Views/Account erstellen
    


// Beim Start DEFAULT Admin und User Rolle automatisch vergeben
[1] DbInit.cs in /Models/ erstellen
Rolle   Benutzer    Passwort
Admin	admin@demo.de	Admin123!
User	user@demo.de	User123!
User    mo@demo.de  Mo123!
User	eduard@demo.de	Eduard123!	
User	suat@demo.de	Suat123!	
User	ahmad@demo.de	Ahmad123!	

[2] in Program.cs Main-Methode anpassen
    public static async Task Main(string[] args)  // <- async!

[3] in Program.cs  vor app.Run(); einf�gen
    using (var scope = app.Services.CreateScope())
{
    var services = scope.ServiceProvider;
    var userManager = services.GetRequiredService<UserManager<IdentityUser>>();
    var roleManager = services.GetRequiredService<RoleManager<IdentityRole>>();
    await Ticketsystem.Models.DbInit.SeedRolesAndUsersAsync(userManager, roleManager);
}



// Ticket CRUD Feature #3
[1] TicketController in /Controllers/ erstellen

[2] Create, Read(Index.cshtml), Update(Edit.cshtml), Delete in Views/Ticket/... erstellen


#################################################
# Änderungen von EdMin - 25.06.2024
#################################################

- Admin-Panel hinzugefügt, das nur für Benutzer mit der Rolle "Admin" sichtbar ist.
- Das Panel zeigt alle Tickets an, gruppiert nach Priorität (Hoch, Mittel, Niedrig).
- Sortierfunktion für Tickets nach Datum, Status und Benutzername hinzugefügt.
- Die Datenbank wird jetzt beim Start automatisch mit Test-Benutzern und einer großen Anzahl von zufälligen Tickets gefüllt.
- Im Admin-Panel wird nun der Benutzername des Ticketerstellers anstelle der ID angezeigt.
- Eine "Zugriff verweigert"-Seite wurde für Benutzer hinzugefügt, die versuchen, auf geschützte Bereiche zuzugreifen.
- Die Datenbank wird beim Anwendungsstart automatisch erstellt und migriert, um Fehler bei der Initialisierung zu vermeiden.

#################################################
# Änderungen von EdMin - 25.06.2024
#################################################

- Neues Admin-Dashboard: Vier Statistikblöcke (Ticket-Status, Developer, Benutzer, Überfällige Tickets) auf der Hauptseite der Admin-Panel.
- Überfällige Tickets: Klick auf "Anzeigen" im Block öffnet eine gefilterte Ansicht aller offenen Tickets älter als 3 Tage, gruppiert nach Priorität.
- Neue Seite /Admin/Tickets: Zeigt alle Tickets gruppiert nach Priorität (Hoch, Mittel, Niedrig) oder – bei Filter – nur überfällige Tickets.
- Neue ViewModel AdminTicketsByPriorityViewModel für Gruppierung nach Priorität.
- AdminController: Tickets-Action mit optionalem overdue-Parameter für Filterung.
- Tickets.cshtml: Dynamischer Titel und Anzeige je nach Filter.

#################################################
# Änderungen von EdMin - 26.06.2024
#################################################

- Die Klasse ApplicationUser wurde erweitert (Eigenschaft FullName hinzugefügt)
- Überall IdentityUser durch ApplicationUser ersetzt (Controller, DbContext, DI)
- Alle Navigationseigenschaften und Beziehungen auf ApplicationUser angepasst
- Das Feld FullName wurde zur Benutzerregistrierung hinzugefügt (RegisterModel, Register.cshtml, AccountController)
- Das Feld FullName wurde beim Erstellen und Bearbeiten von Benutzern im Adminbereich hinzugefügt (CreateUserViewModel, EditUserViewModel, UserManagementController, Views)
- In der Benutzertabelle im Adminbereich wird jetzt FullName angezeigt
- Alle Migrationen wurden korrigiert, die Datenbank wurde mit den neuen Anforderungen neu erstellt
- Die Möglichkeit, Benutzer zu löschen, wurde entfernt
- Die Rolle Developer wurde hinzugefügt und die Rollenverwaltung für Admins ermöglicht
- Refactoring von DI und Services zur Unterstützung von ApplicationUser
- Alle Fehler im Zusammenhang mit UserManager/SignInManager-Typen wurden behoben
- Alle Fehler im Zusammenhang mit Migrationen und Modellen wurden behoben
